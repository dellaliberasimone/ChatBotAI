name: Deploy to Azure Container Apps

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  BACKEND_CONTAINER_NAME: chatbot-backend
  FRONTEND_CONTAINER_NAME: chatbot-frontend
  RESOURCE_GROUP: rg-chatbotAI
  BACKEND_APP_NAME: ca-chatbotai-backend-dev
  FRONTEND_APP_NAME: ca-chatbotai-frontend-dev
  CONTAINER_APPS_ENV_NAME: containerapp-env
  ACR_NAME: acrchatbotai
  ACR_LOGIN_SERVER: acrchatbotai.azurecr.io

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Check and create Container Apps Environment if needed
      run: |
        if ! az containerapp env show --name ${{ env.CONTAINER_APPS_ENV_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query name 2>/dev/null; then
          echo "Container Apps Environment does not exist. Creating..."
          az containerapp env create \
            --name ${{ env.CONTAINER_APPS_ENV_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location $(az group show --name ${{ env.RESOURCE_GROUP }} --query location -o tsv)
        else
          echo "Container Apps Environment already exists."
        fi
        
    - name: Log in to ACR
      run: |
        az acr login --name ${{ env.ACR_NAME }}
        
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_CONTAINER_NAME }}:${{ github.sha }}, ${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_CONTAINER_NAME }}:latest
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_CONTAINER_NAME }}:${{ github.sha }}, ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_CONTAINER_NAME }}:latest
        
    - name: Check and deploy backend Container App
      run: |
        if az containerapp show --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query name 2>/dev/null; then
          echo "Backend Container App exists. Updating with new image..."
          az containerapp update \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_CONTAINER_NAME }}:${{ github.sha }}
        else
          echo "Backend Container App does not exist. Creating..."
          az containerapp create \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_CONTAINER_NAME }}:${{ github.sha }} \
            --environment ${{ env.CONTAINER_APPS_ENV_NAME }} \
            --ingress external \
            --target-port 8080 \
            --env-vars \
              AZURE_OPENAI_ENDPOINT="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
              AZURE_KEYVAULT_URI="${{ secrets.AZURE_KEYVAULT_URI }}" \
            --registry-server ${{ env.ACR_LOGIN_SERVER }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv
        fi
        
    - name: Get backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(az containerapp show --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn --output tsv)
        echo "BACKEND_URL=https://$BACKEND_URL" >> $GITHUB_OUTPUT
        echo "Backend URL: https://$BACKEND_URL"
        
    - name: Check and deploy frontend Container App
      run: |
        if az containerapp show --name ${{ env.FRONTEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query name 2>/dev/null; then
          echo "Frontend Container App exists. Updating with new image..."
          az containerapp update \
            --name ${{ env.FRONTEND_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_CONTAINER_NAME }}:${{ github.sha }}
        else
          echo "Frontend Container App does not exist. Creating..."
          az containerapp create \
            --name ${{ env.FRONTEND_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_CONTAINER_NAME }}:${{ github.sha }} \
            --environment ${{ env.CONTAINER_APPS_ENV_NAME }} \
            --ingress external \
            --target-port 80 \
            --env-vars \
              VITE_API_BASE_URL="${{ steps.backend-url.outputs.BACKEND_URL }}" \
            --registry-server ${{ env.ACR_LOGIN_SERVER }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv
        fi
        
    - name: Configure CORS for backend
      run: |
        FRONTEND_URL=$(az containerapp show --name ${{ env.FRONTEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn --output tsv)
        echo "Frontend URL: https://$FRONTEND_URL"
        
        az containerapp update \
          --name ${{ env.BACKEND_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --set-env-vars \
            AZURE_OPENAI_ENDPOINT="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
            AZURE_KEYVAULT_URI="${{ secrets.AZURE_KEYVAULT_URI }}" \
            CORS_ORIGINS="https://$FRONTEND_URL"
            
    - name: Display deployment URLs
      run: |
        BACKEND_URL=$(az containerapp show --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn --output tsv)
        FRONTEND_URL=$(az containerapp show --name ${{ env.FRONTEND_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query properties.configuration.ingress.fqdn --output tsv)
        
        echo "Deployment completed successfully!"
        echo "Backend URL: https://$BACKEND_URL"
        echo "Frontend URL: https://$FRONTEND_URL"
